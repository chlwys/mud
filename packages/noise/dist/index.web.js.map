{"mappings":";;;;;;;;;;;ACAA;;AAIA,eAAe,+CAAyB,CAAC,GAAQ,EAAE;IACjD,IAAI;QACF,OAAO,MAAM,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACvD,CAAC,OAAM;QACN,OAAO,WAAW,CAAC,OAAO,CAAC,CAAA,GAAA,mCAAE,CAAA,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;KAClD;CACF;AAMM,eAAe,yCAAgB,GAInC;IACD,MAAM,GAAG,mDAAmD,AAAC;IAC7D,MAAM,UAAU,GAAG,MAAM,+CAAyB,CAAC,GAAG,CAAC,AAAC;IAExD,MAAM,CAAA,GAAA,kCAAgB,CAAA,EAAE,CAAC;IAEzB,8DAA8D;IAC9D,MAAM,YAAY,GAAQ,MAAM,WAAW,CAAC,WAAW,CAAC,UAAU,EAAE;QAClE,GAAG,EAAE;YACH,IAAI,EAAC,UAAkB,EAAE;gBACvB,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,GAAG,EAAE,CAAC,CAAC,AAAC;gBACnG,MAAM,MAAM,GAAgB,CAAA,GAAA,2BAAS,CAAA,CAAC,IAAI,EAAE,KAAK,CAAC,AAAC;gBACnD,OAAO,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;aACtD;YACD,KAAK,EAAE,WAAY;gBACjB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;aAChD;YACD,QAAQ,EAAC,CAAS,EAAE;gBAClB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAChB;YACD,GAAG,EAAC,CAAS,EAAE;gBACb,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;aAC/B;SACF;KACF,CAAC,AAAC;IAEH,SAAS,UAAU,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,IAAY,EAAE,KAAa,EAAE,KAAc,EAAE;QAC3G,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,AAAC;QAC/E,OAAO,IAAI,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC/F;IAED,OAAO;QAAE,GAAG,YAAY,CAAC,OAAO;oBAAE,UAAU;KAAE,CAAC;CAChD;;ADpDD","sources":["packages/noise/src/index.ts","packages/noise/src/wasm/index.ts"],"sourcesContent":["export { createPerlinWasm } from \"./wasm\";\n","import fs from \"fs\";\nimport { InitializeKeccak, keccak256 } from \"keccak-wasm\";\nimport { perlinSingle as _perlinSingle, perlinRect as _perlinRect, memory as _memory } from \"./types\";\n\nasync function fetchAndCompileWasmModule(url: URL) {\n  try {\n    return await WebAssembly.compileStreaming(fetch(url));\n  } catch {\n    return WebAssembly.compile(fs.readFileSync(url));\n  }\n}\n\n/**\n * Initialize perlin wasm functions.\n * @returns { {@link perlinSingle}, {@link perlinRect}, {@link memory} }\n */\nexport async function createPerlinWasm(): Promise<{\n  perlinSingle: typeof _perlinSingle;\n  perlinRect: typeof _perlinRect;\n  memory: typeof _memory;\n}> {\n  const url = new URL(\"./build/release.wasm\", import.meta.url);\n  const wasmModule = await fetchAndCompileWasmModule(url);\n\n  await InitializeKeccak();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const wasmInstance: any = await WebAssembly.instantiate(wasmModule, {\n    env: {\n      rand(dataOffset: number) {\n        const data = new Uint8Array(wasmInstance.exports.memory.buffer.slice(dataOffset, dataOffset + 16));\n        const result: ArrayBuffer = keccak256(data, false);\n        return new Uint8Array(result)[result.byteLength - 1];\n      },\n      abort: function () {\n        throw new Error(\"abort called in wasm perlin\");\n      },\n      logFloat(f: number) {\n        console.log(f);\n      },\n      log(b: Buffer) {\n        console.log(\"wasm buffer\", b);\n      },\n    },\n  });\n\n  function perlinRect(x: number, y: number, w: number, h: number, seed: number, scale: number, floor: boolean) {\n    const offset = wasmInstance.exports.perlinRect(x, y, w, h, seed, scale, floor);\n    return new Float64Array(wasmInstance.exports.memory.buffer.slice(offset, offset + w * h * 8));\n  }\n\n  return { ...wasmInstance.exports, perlinRect };\n}\n"],"names":[],"version":3,"file":"index.web.js.map"}